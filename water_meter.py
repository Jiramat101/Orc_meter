from ultralytics import YOLO 
import cv2
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from collections import Counter
import easyocr
import numpy as np

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô preprocess: grayscale + resize
def preprocess_gray_resize(image, scale=2):
    resized = cv2.resize(image, None, fx=scale, fy=scale, interpolation=cv2.INTER_LINEAR)
    gray = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)
    return gray

# ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Tkinter
Tk().withdraw()

# ‡πÄ‡∏õ‡∏¥‡∏î File Dialog ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û
image_path = askopenfilename(
    title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö",
    filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")]
)

if not image_path:
    print("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏î ‡πÜ")
else:
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ CPU ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    model = YOLO("runs/detect/train15/weights/best.pt")
    results = model(image_path, device="cpu")
    boxes = results[0].boxes

    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ class ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    if boxes is not None and boxes.cls is not None:
        class_ids = boxes.cls.cpu().numpy().astype(int)
        class_names = [model.names[i] for i in class_ids]
        counts = Counter(class_names)

        print("‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏û:")
        for name, count in counts.items():
            print(f"- {name}: {count} ‡∏ä‡∏¥‡πâ‡∏ô")
    else:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏î ‡πÜ")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    annotated_frame = results[0].plot()
    cv2.namedWindow("YOLOv8 Detection", cv2.WINDOW_NORMAL)
    cv2.imshow("YOLOv8 Detection", annotated_frame)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    # OCR ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ class ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    target_classes = ["0", "0R", "1", "1R", "2", "2R", "3", "3R", "4", "4R", "5", "5R", "6", "6R", "7", "7R", "8", "8R", "9", "9R"]
    original_image = cv2.imread(image_path)

    print("\nüìå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ class ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î):")

    reader = easyocr.Reader(['en'], gpu=True)

    # üü¢ ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞ class name ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ target class
    all_boxes = []
    for i, (box, cls_id) in enumerate(zip(boxes.xyxy, boxes.cls.cpu().numpy().astype(int))):
        class_name = model.names[cls_id]
        if class_name in target_classes:
            x1, y1, x2, y2 = map(int, box)
            all_boxes.append(((x1, y1, x2, y2), class_name))

    # üîÉ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ ‚Üí ‡∏Ç‡∏ß‡∏≤ (‡∏ï‡∏≤‡∏° x1)
    sorted_boxes = sorted(all_boxes, key=lambda b: b[0][0])  # b[0][0] = x1

    # üß† OCR ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß
    for i, ((x1, y1, x2, y2), class_name) in enumerate(sorted_boxes):
        cropped = original_image[y1:y2, x1:x2]
        processed = preprocess_gray_resize(cropped)
        ocr_result = reader.readtext(processed, allowlist='0123456789', detail=0)
        text = ''.join(ocr_result).strip()

        print(f"\n[class: {class_name}] ‡∏Å‡∏•‡πà‡∏≠‡∏á {i+1}:")
        print(f"  ‚û§ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤: {text}")

        cv2.imshow(f"{class_name} #{i+1}", processed)
        cv2.waitKey(0)

    cv2.destroyAllWindows()
